{# templates/profile/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Mon Profil{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('asset/css/form.css') }}">
    {{ parent() }}
    <style>
        .autocomplete {
            position: relative;
            display: inline-block;
            margin-top: 20px;
        }
        .autocomplete input {
            width: 600px;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
        }
        .autocomplete .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            max-height: 200px;
            overflow-y: auto;
            z-index: 99;
            background-color: #fff;
            width: 100%
        }
        .autocomplete .autocomplete-item {
            display: flex;
            align-items: center;
            padding: 10px;
            cursor: pointer;
        }
        .club-logo {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .autocomplete .autocomplete-item:hover {
            background-color: #e9e9e9;
        }
        .autocomplete-item span {
            font-size: 16px;
        }
        @media (max-width: 768px) {
            .autocomplete {
                width: 100%;
            }
            .autocomplete input {
                width: 100%; /* Prend toute la largeur disponible */
                font-size: 14px; /* Réduit la taille de la police pour une meilleure lisibilité */
            }
            .autocomplete .autocomplete-items {
                max-height: 150px; /* Ajuste la hauteur pour mieux s'adapter aux petits écrans */
            }
            .autocomplete .autocomplete-item {
                padding: 8px; /* Réduit légèrement l'espace autour des éléments */
            }
            .club-logo {
                width: 30px; /* Réduit la taille du logo pour s'adapter à l'espace plus restreint */
                margin-right: 8px;
            }
            .autocomplete-item span {
                font-size: 14px; /* Réduit la taille du texte pour une meilleure adaptation */
            }
        }
    </style>
{% endblock %}

{% block body %}
    {{ form_start(form) }}
        <h1 class="form-title">Mettre à jour le profil</h1>
        {{ form_row(form.name) }}
        {{ form_row(form.lastname) }}
        {{ form_row(form.email) }}  {# Ajout du champ email #}
<!-- Conteneur principal pour le champ de recherche et les résultats de l'auto-complétion -->
<div class="autocomplete">
    <!-- Étiquette pour le champ de recherche, associée à l'élément avec l'ID 'clubSearch' -->
    <label for="clubSearch">Club</label>
    
    <!-- Champ de texte pour entrer le nom du club avec des valeurs dynamiques basées sur les données de l'utilisateur -->
    <input type="text" id="clubSearch" name="clubSearch" placeholder="Nom du club" value="{{ user.userProfile.club ? user.userProfile.club.name : '' }}">
    
    <!-- Champ caché pour stocker l'ID du club sélectionné, également basé sur les données de l'utilisateur -->
    <input type="hidden" id="clubId" name="clubId" value="{{ user.userProfile.club ? user.userProfile.club.id : '' }}">
    
    <!-- Zone pour afficher les résultats de l'auto-complétion -->
    <div class="autocomplete-items" id="clubSearchResults"></div>
</div>

        {{ form_row(form.birth_date) }}
        {{ form_row(form.save) }}
    {{ form_end(form) }}

    <a href="{{ path('app_profile_change_password') }}" class="change-password">Changer le mot de passe</a>
    
    <!-- Lien vers la gestion des blocages -->
    <a href="{{ path('app_manage_blocks') }}" class="manage-blocks change-password">Gérer les blocages</a>

{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>

// Ajoute un écouteur d'événement pour le moment où le document HTML est complètement chargé et analysé
document.addEventListener('DOMContentLoaded', function() {
    // Sélectionne l'élément avec l'identifiant 'clubSearch' et le stocke dans la variable 'clubSearchInput'
    const clubSearchInput = document.getElementById('clubSearch');
    // Sélectionne l'élément avec l'identifiant 'clubId' et le stocke dans la variable 'clubIdInput'
    const clubIdInput = document.getElementById('clubId');
    // Sélectionne l'élément avec l'identifiant 'clubSearchResults' et le stocke dans la variable 'clubSearchResults'
    const clubSearchResults = document.getElementById('clubSearchResults');
    // Ajoute un écouteur d'événement pour les entrées dans l'élément 'clubSearchInput'
    clubSearchInput.addEventListener('input', function() {
        // Récupère la valeur de l'entrée de recherche, en enlevant les espaces de début et de fin
        const query = this.value.trim();
        // Effectue une requête fetch vers l'URL pour rechercher des clubs avec la requête encodée
        fetch(`/profile/clubs/search?q=${encodeURIComponent(query)}`)
            .then(response => response.json())  // Convertit la réponse en JSON
            .then(data => {
                // Vide le contenu actuel de 'clubSearchResults'
                clubSearchResults.innerHTML = '';
                // Parcourt chaque club dans les données reçues
                data.forEach(club => {
                    // Crée un nouvel élément 'div' pour chaque club
                    const item = document.createElement('div');
                    item.classList.add('autocomplete-item');  // Ajoute la classe CSS 'autocomplete-item'
                    // Crée un nouvel élément 'span' pour le nom du club
                    const clubName = document.createElement('span');
                    clubName.textContent = club.name;  // Définit le texte du 'span' au nom du club
                    // Crée un nouvel élément 'img' pour le logo du club
                    const logo = document.createElement('img');
                    logo.src = club.logo;  // Définit la source de l'image au logo du club
                    logo.classList.add('club-logo');  // Ajoute la classe CSS 'club-logo'
                    // Ajoute le logo et le nom du club à l'élément 'item'
                    item.appendChild(logo);
                    item.appendChild(clubName);
                    // Ajoute un écouteur d'événement pour les clics sur l'élément 'item'
                    item.addEventListener('click', function() {
                        // Remplit les champs de recherche et d'identifiant avec les informations du club sélectionné
                        clubSearchInput.value = club.name;
                        clubIdInput.value = club.id;
                        // Vide les résultats de recherche
                        clubSearchResults.innerHTML = '';
                    });
                    // Ajoute l'élément 'item' à la liste des résultats de recherche
                    clubSearchResults.appendChild(item);
                });
            })
            .catch(error => {
                // Affiche une erreur dans la console en cas de problème avec la requête
                console.error('Error fetching clubs:', error);
            });
    });
    // Réinitialise la liste de résultats si le champ de recherche est vidé
    clubSearchInput.addEventListener('keyup', function(event) {
        if (event.key === 'Backspace' || event.key === 'Delete') {
            if (clubSearchInput.value === '') {
                clubSearchResults.innerHTML = '';
            }
        }
    });
    // Réinitialise la liste de résultats si le champ de recherche perd le focus
    clubSearchInput.addEventListener('blur', function() {
        if (clubSearchInput.value === '') {
            clubSearchResults.innerHTML = '';
        }
    });
});

    </script>
{% endblock %}
